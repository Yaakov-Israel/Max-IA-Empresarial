# ==============================================================================
# 1. IMPORTA√á√ïES E CONFIGURA√á√ÉO INICIAL DA P√ÅGINA
# ==============================================================================
import streamlit as st
import os
import io
import pyrebase
import base64
import time
import datetime
import firebase_admin
import pandas as pd
from PIL import Image
from docx import Document
from fpdf import FPDF
from langchain_google_genai import ChatGoogleGenerativeAI
from firebase_admin import credentials, firestore as firebase_admin_firestore
import plotly.graph_objects as go

# --- IN√çCIO DA CONFIGURA√á√ÉO DE CAMINHOS E DIRET√ìRIOS ---
# Padroniza o diret√≥rio de assets para robustez na implanta√ß√£o.
# CRIE UMA PASTA CHAMADA "assets" NA RAIZ DO SEU PROJETO E COLOQUE SUAS IMAGENS E FONTES L√Å.
ASSETS_DIR = "assets"

def get_asset_path(asset_name):
    """Constr√≥i o caminho para um asset dentro da pasta 'assets' de forma segura."""
    # O PWD (Print Working Directory) garante que o caminho √© relativo ao local do script.
    try:
        return os.path.join(os.path.dirname(os.path.abspath(__file__)), ASSETS_DIR, asset_name)
    except NameError:
         # Fallback para ambientes onde __file__ n√£o est√° definido (como alguns notebooks)
        return os.path.join(ASSETS_DIR, asset_name)


# Tenta carregar o √≠cone da p√°gina, com fallback
try:
    page_icon_path = get_asset_path("carinha-agente-max-ia.png")
    page_icon_obj = Image.open(page_icon_path) if os.path.exists(page_icon_path) else "ü§ñ"
except Exception:
    page_icon_obj = "ü§ñ"
st.set_page_config(page_title="Max IA Empresarial", page_icon=page_icon_obj, layout="wide", initial_sidebar_state="collapsed")
# --- FIM DA CONFIGURA√á√ÉO DE CAMINHOS ---

# ==============================================================================
# 2. CONSTANTES
# ==============================================================================
APP_KEY_SUFFIX = "maxia_app_v14.0_final_build"
USER_COLLECTION = "users"
COMPANY_COLLECTION = "companies"
os.environ["TOKENIZERS_PARALLELISM"] = "false"
SALES_PAGE_URL = "https://sua-pagina-de-vendas.com.br" # <-- IMPORTANTE: Substitua por sua URL real

# ==============================================================================
# 3. FUN√á√ïES AUXILIARES GLOBAIS
# ==============================================================================
def convert_image_to_base64(image_name):
    image_path = get_asset_path(image_name)
    try:
        if os.path.exists(image_path):
            with open(image_path, "rb") as image_file:
                return base64.b64encode(image_file.read()).decode()
    except Exception as e:
        print(f"ERRO convert_image_to_base64: {e}")
    return None

# ==============================================================================
# 4. INICIALIZA√á√ÉO DE SERVI√áOS E AUTENTICA√á√ÉO
# ==============================================================================
@st.cache_resource
def initialize_firebase_services():
    try:
        conf = st.secrets["firebase_config"]; sa_creds = st.secrets["gcp_service_account"]
        pb_auth = pyrebase.initialize_app(dict(conf)).auth()
        if not firebase_admin._apps:
            cred = credentials.Certificate(dict(sa_creds)); firebase_admin.initialize_app(cred)
        firestore_db = firebase_admin_firestore.client()
        return pb_auth, firestore_db
    except Exception as e: st.error(f"Erro cr√≠tico na inicializa√ß√£o do Firebase: {e}"); return None, None

pb_auth_client, firestore_db = initialize_firebase_services()

@st.cache_resource
def get_llm():
    try:
        api_key = st.secrets.get("GOOGLE_API_KEY")
        if api_key: return ChatGoogleGenerativeAI(model="gemini-1.5-pro-latest", google_api_key=api_key, temperature=0.75)
        else: st.error("Chave GOOGLE_API_KEY n√£o configurada."); return None
    except Exception as e: st.error(f"Erro ao inicializar LLM: {e}"); return None

def get_current_user_status(auth_client):
    user_auth, uid, email = False, None, None; session_key = f'{APP_KEY_SUFFIX}_user_session_data'
    if session_key in st.session_state and st.session_state[session_key]:
        try:
            account_info = auth_client.get_account_info(st.session_state[session_key]['idToken'])
            user_auth = True; user_info = account_info['users'][0]
            uid = user_info['localId']; email = user_info.get('email')
            st.session_state.update({'user_is_authenticated': True, 'user_uid': uid, 'user_email': email})
        except Exception:
            st.session_state.clear(); user_auth = False
    return user_auth, uid, email

# ==============================================================================
# 5. CLASSE PRINCIPAL DO AGENTE (FUNCIONALIDADES COMPLETAS)
# ==============================================================================
class MaxAgente:
    def __init__(self, llm_instance, db_firestore_instance):
        self.llm = llm_instance
        self.db = db_firestore_instance

    def exibir_painel_boas_vindas(self):
        st.title("üëã Bem-vindo ao seu Centro de Comando!")
        st.markdown("Use o menu √† esquerda para navegar entre os Agentes Max IA e transformar a gest√£o da sua empresa.")
        try:
            logo_path = get_asset_path('max-ia-lgo.fundo.transparente.png')
            if os.path.exists(logo_path):
                st.image(logo_path, width=200)
        except Exception as e:
            print(f"Alerta: N√£o foi poss√≠vel carregar a logo do painel de boas-vindas. Erro: {e}")

    def exibir_central_de_comando(self):
        st.header("üè¢ Central de Comando")
        st.caption("Sua vis√£o 360¬∞ para uma gest√£o proativa e inteligente.")
        col1, col2, col3 = st.columns(3)
        col1.metric("Sa√∫de Operacional", "85%", "5%")
        col2.metric("Progresso Estrat√©gico", "62%", "-2%")
        col3.metric("Clima da Equipe", "8.2/10")
        with st.expander("‚öôÔ∏è Opera√ß√µes & Compliance (MaxAdministrativo)", expanded=True):
            st.info("üí° Alerta do Max: Percebi que este m√™s voc√™ n√£o lan√ßou a nota fiscal do seu aluguel.")
        
    def exibir_max_financeiro(self):
        st.header("üí∞ MaxFinanceiro")
        st.caption("O C√©rebro Financeiro da sua empresa em Tempo Real.")
        col1, col2, col3 = st.columns(3)
        col1.metric("Vendas do Dia", "R$ 1.250,75", "12%")
        col2.metric("Contas a Receber", "R$ 7.500,50")
        col3.metric("Saldo em Caixa", "R$ 12.345,67", "- R$ 250,00")
        with st.expander("üí° Alertas e Insights do MaxFinanceiro"):
            st.warning("Aten√ß√£o: sua proje√ß√£o de caixa indica um poss√≠vel saldo negativo em 12 dias.")

    def exibir_central_cliente(self):
        st.header("üìà Central do Cliente 360¬∞")
        st.caption("Transforme dados em relacionamentos e fideliza√ß√£o.")
        col1, col2, col3 = st.columns(3)
        col1.metric("Satisfa√ß√£o (NPS)", "72", "Excelente")
        col2.metric("Taxa de Reten√ß√£o", "85%")
        col3.metric("Clientes em Risco", "18")
        with st.expander("üéØ Campanhas de Fidelidade Sugeridas pela IA", expanded=True):
            st.success("**Para Clientes 'Campe√µes'**: Que tal criar um 'Clube VIP' com desconto exclusivo?")
            st.info("**Para Clientes 'Em Risco'**: Vamos enviar uma campanha de reativa√ß√£o com o t√≠tulo 'Estamos com saudades!'?")

    def exibir_max_trainer_ia(self):
        st.title("üéì MaxTrainer IA")
        st.markdown("Seu mentor pessoal para descomplicar a jornada empreendedora.")
        if "messages_trainer" not in st.session_state:
            st.session_state.messages_trainer = [{"role": "assistant", "content": "Ol√°! Sobre o que vamos conversar hoje?"}]
        for message in st.session_state.messages_trainer:
            with st.chat_message(message["role"]): st.markdown(message["content"])
        if prompt := st.chat_input("Pergunte sobre Fluxo de Caixa..."):
            st.session_state.messages_trainer.append({"role": "user", "content": prompt})
            with st.chat_message("user"): st.markdown(prompt)
            with st.chat_message("assistant"):
                st.markdown(f"Explicando '{prompt}' com uma analogia de Futebol... (Simula√ß√£o)")
                st.session_state.messages_trainer.append({"role": "assistant", "content": f"Explicando '{prompt}' com uma analogia de Futebol... (Simula√ß√£o)"})

        # --- 5.1: MaxMarketing Total ---
    def exibir_max_marketing_total(self):
        st.header("üöÄ Est√∫dio de Cria√ß√£o Max")
        st.caption("Seu Diretor de Marketing Pessoal para criar posts, campanhas e an√∫ncios que vendem.")
        st.markdown("---")
        
        # --- Estrutura de Abas (Wizard) ---
        tab_post, tab_campaign, tab_ads = st.tabs([
            "‚úçÔ∏è Criar Post R√°pido", "üéØ Criar Campanha Completa", "‚ö° Criar An√∫ncio R√°pido"
        ])

        # --- Aba 1: Criar Post ---
        with tab_post:
            st.subheader("Gerador de Conte√∫do Criativo")
            st.write("Ideal para manter suas redes sociais ativas e interessantes no dia a dia.")

            with st.form("post_briefing_form"):
                post_idea = st.text_area("Sobre o que √© o post de hoje? Me d√™ uma ideia simples.", "Ex: Promo√ß√£o de 20% no nosso servi√ßo de limpeza de sof√°.")
                post_channel = st.selectbox("Para qual canal voc√™ quer criar primeiro?", ["Instagram", "Facebook", "TikTok", "YouTube (Roteiro Curto)"])
                
                submitted = st.form_submit_button("üí° Gerar Pacote de M√≠dia com Max IA")
                if submitted:
                    with st.spinner("Max est√° buscando inspira√ß√£o e criando seu conte√∫do..."):
                        time.sleep(2) # Simula o processamento da IA
                        st.success("Pacote de M√≠dia gerado!")
                        
                        st.markdown("---")
                        st.subheader("‚úÖ Seu Pacote de M√≠dia para 'Limpeza de Sof√°'")

                        tab_feed, tab_stories, tab_image = st.tabs(["üì∑ Para o Feed", "üì± Para Stories/Reels", "üñºÔ∏è Sugest√£o de Imagem (IA)"])

                        with tab_feed:
                            st.write("**Op√ß√£o 1 (Foco no Benef√≠cio):**")
                            st.info("üõãÔ∏è‚ú® Seu sof√°, novo de novo! Manchas e sujeira somem como m√°gica. Deixe sua sala mais aconchegante e sua fam√≠lia mais saud√°vel. Aproveite nossos 20% OFF e respire al√≠vio! Link na bio.")
                            
                            st.write("**Op√ß√£o 2 (Foco na Urg√™ncia):**")
                            st.warning("‚ö†Ô∏è √öLTIMA SEMANA! N√£o deixe seu sof√° passar o fim de semana pedindo socorro. Agende agora e garanta 20% de desconto na limpeza completa. Vagas limitadas!")
                            
                            st.write("**Hashtags Sugeridas:**")
                            st.caption("#limpezadesofa #sofalimpo #higienizacao #casa #decor #promocao")

                        with tab_stories:
                            st.write("**Roteiro para V√≠deo Curto (15s):**")
                            st.code("""
Cena 1 (2s): Close em uma mancha de vinho em um sof√°.
   Texto na tela: "Acidentes acontecem..."

Cena 2 (3s): V√≠deo acelerado de um profissional limpando o sof√°.
   Texto: "...mas a solu√ß√£o √© r√°pida!"

Cena 3 (5s): O sof√° limpo e impec√°vel, com a fam√≠lia sorrindo.
   Texto: "20% OFF na limpeza de sof√°. Link na bio!"

√Åudio Sugerido: Use este √°udio em alta para aumentar o alcance: [Nome do √Åudio em Alta no Momento]
                            """, language="markdown")

                        with tab_image:
                            st.image("https://images.pexels.com/photos/4352247/pexels-photo-4352247.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",
                                     caption="Imagem gerada por IA: 'Sof√° visivelmente limpo e brilhante em uma sala de estar aconchegante'.")
        
        # --- Aba 2: Criar Campanha ---
        with tab_campaign:
            st.subheader("Estrategista de M√≠dia Digital")
            st.write("Para quando voc√™ tem um objetivo claro e um or√ßamento para investir.")

            with st.form("campaign_form"):
                campaign_objective = st.selectbox("Qual √© o seu principal objetivo?", ["Vender mais um produto", "Trazer mais gente para a loja f√≠sica", "Receber mais mensagens no WhatsApp"])
                campaign_budget = st.number_input("Quanto voc√™ gostaria de investir (R$)?", min_value=50, value=300, step=50)
                campaign_duration = st.slider("Por quantos dias?", 1, 30, 5)
                
                submitted = st.form_submit_button("ü§ñ Montar Estrat√©gia com Max IA")
                if submitted:
                    with st.spinner("Max est√° analisando o mercado e montando sua estrat√©gia..."):
                        time.sleep(2)
                        st.success("Estrat√©gia de Campanha Pronta!")
                        
                        st.markdown("---")
                        st.subheader("üéØ Seu Plano de A√ß√£o Estrat√©gico")
                        
                        st.info(f"""
                        **Recomenda√ß√£o de Canais:**
                        Com R$ {campaign_budget:.2f} para {campaign_duration} dias, minha sugest√£o √© focar:
                        - **70% (R$ {campaign_budget*0.7:.2f}) no Instagram/Facebook:** √ìtimo para segmentar por localiza√ß√£o e interesses.
                        - **30% (R$ {campaign_budget*0.3:.2f}) na Rede de Pesquisa do Google:** Para capturar quem busca ativamente por voc√™.
                        """)
                        
                        st.success("""
                        **Defini√ß√£o de P√∫blico Simplificada (IA):**
                        Vou mostrar seus an√∫ncios para:
                        - Pessoas de **22 a 50 anos** que moram ou trabalham a at√© **3km** do seu endere√ßo.
                        - Pessoas com interesse em **'caf√© especial', 'brunch' e 'livros'**.
                        - Um **'P√∫blico Semelhante'** aos seus melhores clientes cadastrados na sua Central do Cliente 360¬∞.
                        """)

        # --- Aba 3: Criar An√∫ncio R√°pido ---
        with tab_ads:
            st.subheader("Especialista Google Simplificado")
            st.write("Coloque sua empresa no topo do Google sem complica√ß√µes.")
            
            user_search_term = st.text_input("O que uma pessoa digitaria no Google para te encontrar?", "eletricista 24 horas em Juiz de Fora")
            
            if st.button("üîç Gerar An√∫ncios de Alta Performance"):
                with st.spinner("Max est√° pesquisando as melhores palavras e criando seus an√∫ncios..."):
                    time.sleep(2)
                    st.success("An√∫ncios prontos para o Google!")
                    
                    st.markdown("---")
                    st.subheader("‚úÖ Seus An√∫ncios para o Google")
                    
                    with st.expander("Palavras-Chave Encontradas pela IA"):
                        st.write(["eletricista 24 horas juiz de fora", "eletricista de emerg√™ncia jf", "conserto el√©trico urgente", "eletricista perto de mim agora"])
                    
                    with st.container(border=True):
                        st.write("**An√∫ncio 1 (Foco em Velocidade):**")
                        st.markdown("> **Eletricista 24h em Juiz de Fora | Atendimento R√°pido**")
                        st.caption("Problema El√©trico? Chegamos em at√© 40 Min. Atendemos todos os bairros. Or√ßamento gr√°tis pelo WhatsApp!")
                    
                    st.warning("**Otimiza√ß√£o Cont√≠nua do Max (ap√≥s 3 dias):** \"O an√∫ncio com o t√≠tulo 'Chegamos em 40 Min.' est√° trazendo 50% mais cliques. Recomendo pausar os outros. Voc√™ aprova?\"")


    def exibir_max_construtor(self): st.info("üèóÔ∏è Agente MaxConstrutor em desenvolvimento.")

    # Onboarding
    def exibir_onboarding_calibracao(self): st.title("Calibra√ß√£o da Empresa...")
    def exibir_onboarding_trainer(self): st.title("Personaliza√ß√£o da Experi√™ncia...")
    def exibir_tour_guiado(self): st.title("Tour Guiado...")

# ==============================================================================
# 6. FUN√á√ïES DA INTERFACE DE ENTRADA (√Ä PROVA DE FALHAS)
# ==============================================================================
def exibir_pagina_de_entrada():
    try:
        logo_base64 = convert_image_to_base64('max-ia-lgo.fundo.transparente.png')
        background_image_url = "https://images.pexels.com/photos/3184418/pexels-photo-3184418.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1"
        st.markdown(f"""
            <style>
            .stApp {{ background-image: linear-gradient(rgba(0,0,0,0.6), rgba(0,0,0,0.6)), url("{background_image_url}"); background-size: cover; background-position: center; }}
            .stApp > header, .stSidebar {{ background-color: transparent !important; }}
            .main-container {{ display: flex; flex-direction: column; justify-content: flex-end; align-items: center; height: 90vh; padding-bottom: 5vh; }}
            .logo-container {{ position: absolute; top: 2rem; left: 2rem; }}
            [data-testid="stSidebar"] {{ display: none; }}
            </style>""", unsafe_allow_html=True)
        if logo_base64:
            st.markdown(f"<div class='logo-container'><img src='data:image/png;base64,{logo_base64}' width='150'></div>", unsafe_allow_html=True)
    except Exception as e:
        print(f"Alerta: N√£o foi poss√≠vel renderizar a p√°gina de entrada com imagens. Erro: {e}")

    with st.container():
        st.markdown("<div class='main-container'>", unsafe_allow_html=True)
        _ , col, _ = st.columns([1, 2.5, 1])
        with col:
            if st.button("J√° sou cliente", use_container_width=True): st.session_state['show_login_form'] = True; st.rerun()
            if st.button("Ainda n√£o sou cliente", type="secondary", use_container_width=True): st.html(f"<script>window.open('{SALES_PAGE_URL}', '_blank')</script>")
            st.caption("<p style='text-align: center; color: white;'>Ao continuar, voc√™ aceita nossos Termos e condi√ß√µes.</p>", unsafe_allow_html=True)
        st.markdown("</div>", unsafe_allow_html=True)

def exibir_formularios_de_acesso():
    st.markdown("""<style>[data-testid="stSidebar"] { display: none; }</style>""", unsafe_allow_html=True)
    _ , col, _ = st.columns([1, 1.5, 1])
    with col:
        try:
            logo_path = get_asset_path('max-ia-lgo.fundo.transparente.png')
            if os.path.exists(logo_path): st.image(logo_path, width=150)
            else: st.title("Max IA Empresarial")
        except Exception as e:
            print(f"Alerta: N√£o foi poss√≠vel carregar a logo dos formul√°rios de acesso. Erro: {e}")
            st.title("Max IA Empresarial")
        
        st.header("Acesse sua Central de Comando")
        tab_login, tab_register = st.tabs(["Login", "Registrar"])
        with tab_login:
            with st.form("login_form_main"):
                email = st.text_input("Email", key="login_email")
                password = st.text_input("Senha", type="password", key="login_pass")
                if st.form_submit_button("Entrar", use_container_width=True):
                    try:
                        user_creds = pb_auth_client.sign_in_with_email_and_password(email, password)
                        st.session_state[f'{APP_KEY_SUFFIX}_user_session_data'] = user_creds
                        st.session_state['show_login_form'] = False; st.rerun()
                    except Exception: st.error("Email ou senha inv√°lidos.")
        with tab_register:
            with st.form("register_form_main"):
                st.write("Crie sua conta para iniciar.")
                reg_email = st.text_input("Seu melhor e-mail", key="reg_email")
                reg_password = st.text_input("Crie uma senha forte", type="password", key="reg_pass")
                if st.form_submit_button("Registrar Conta", use_container_width=True):
                    if reg_email and len(reg_password) >= 6:
                        try:
                            new_user = pb_auth_client.create_user_with_email_and_password(reg_email, reg_password)
                            user_data = { "email": reg_email, "registration_date": firebase_admin_firestore.SERVER_TIMESTAMP, "access_level": 2, "analogy_domain": None, "company_id": None }
                            firestore_db.collection(USER_COLLECTION).document(new_user['localId']).set(user_data)
                            st.success("Conta criada! Volte para a aba 'Login' para entrar.")
                        except Exception as e: st.error("Este e-mail j√° est√° em uso ou ocorreu um erro no registro.")
                    else: st.warning("Preencha todos os campos corretamente.")

# ==============================================================================
# 7. ESTRUTURA PRINCIPAL E EXECU√á√ÉO DO APP (√Ä PROVA DE FALHAS)
# ==============================================================================
def main():
    if not all([pb_auth_client, firestore_db]):
        st.error("Falha cr√≠tica na inicializa√ß√£o dos servi√ßos."); st.stop()

    user_is_authenticated, user_uid, user_email = get_current_user_status(pb_auth_client)

    if user_is_authenticated:
        try:
            logo_path = get_asset_path('max-ia-lgo.fundo.transparente.png')
            if os.path.exists(logo_path):
                st.sidebar.image(logo_path, width=100)
        except Exception as e:
            print(f"Alerta: N√£o foi poss√≠vel carregar a logo da sidebar. Erro: {e}")

        st.sidebar.title("Max IA Empresarial")
        st.sidebar.markdown("---")
        
        if 'agente' not in st.session_state:
            llm = get_llm()
            if llm and firestore_db: st.session_state.agente = MaxAgente(llm, firestore_db)
            else: st.error("Agente Max IA n√£o p√¥de ser inicializado."); st.stop()
        
        agente = st.session_state.agente
        
        try:
            user_doc = firestore_db.collection(USER_COLLECTION).document(user_uid).get()
            user_data = user_doc.to_dict() if user_doc.exists else None
        except Exception as e: st.error(f"Erro ao buscar dados do usu√°rio: {e}"); st.stop()

        if not user_data: 
            user_data = {"email": user_email, "access_level": 2}
            firestore_db.collection(USER_COLLECTION).document(user_uid).set(user_data, merge=True)
        
        st.sidebar.write(f"Logado como: **{user_email}**")
        st.sidebar.caption(f"N√≠vel de Acesso: {user_data.get('access_level', 'N/D')}")
        if st.sidebar.button("Logout", key=f"{APP_KEY_SUFFIX}_logout"):
            st.session_state.clear(); st.rerun()
        
        opcoes_menu_completo = {
            "üëã Bem-vindo": agente.exibir_painel_boas_vindas,
            "üè¢ Central de Comando": agente.exibir_central_de_comando,
            "üí∞ MaxFinanceiro": agente.exibir_max_financeiro,
            "üìà Central do Cliente 360¬∞": agente.exibir_central_cliente,
            "üöÄ MaxMarketing Total": agente.exibir_max_marketing_total,
            "üéì MaxTrainer IA": agente.exibir_max_trainer_ia,
            "üèóÔ∏è MaxConstrutor": agente.exibir_max_construtor,
        }
        
        access_level = user_data.get('access_level', 2)
        opcoes_permitidas_nomes = []

        if access_level == 1:
            opcoes_permitidas_nomes = list(opcoes_menu_completo.keys())
        else:
            opcoes_permitidas_nomes = ["üëã Bem-vindo", "üéì MaxTrainer IA"]
            if access_level == 2: opcoes_permitidas_nomes.append("üìà Central do Cliente 360¬∞")
            elif access_level == 3: opcoes_permitidas_nomes.append("üöÄ MaxMarketing Total")
            elif access_level == 4: opcoes_permitidas_nomes.append("üèóÔ∏è MaxConstrutor")
            elif access_level == 5: opcoes_permitidas_nomes.append("üí∞ MaxFinanceiro")
            elif access_level == 6: opcoes_permitidas_nomes.append("üè¢ Central de Comando")
        
        opcoes_menu_filtrado = {nome: funcao for nome, funcao in opcoes_menu_completo.items() if nome in opcoes_permitidas_nomes}

        selecao_label = st.sidebar.radio("Max Agentes IA:", list(opcoes_menu_filtrado.keys()), key=f"{APP_KEY_SUFFIX}_menu")
        if selecao_label in opcoes_menu_filtrado:
            opcoes_menu_filtrado[selecao_label]()
    else:
        if st.session_state.get('show_login_form', False):
            exibir_formularios_de_acesso()
        else:
            exibir_pagina_de_entrada()

if __name__ == "__main__":
    main()
