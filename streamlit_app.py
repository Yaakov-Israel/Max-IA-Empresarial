# ==============================================================================
# streamlit_app.py (VERS√ÉO F√äNIX v2.2 - BASE DE GRIFE)
# ==============================================================================
# 1. IMPORTA√á√ïES E CONFIGURA√á√ÉO INICIAL DA P√ÅGINA
import streamlit as st
import os
import io
import json
import pyrebase
import base64
import time
import datetime
import firebase_admin
from PIL import Image
from docx import Document
from fpdf import FPDF
from langchain_google_genai import ChatGoogleGenerativeAI
from firebase_admin import credentials, firestore as firebase_admin_firestore
from utils import carregar_prompts_config, get_image_path, get_font_path

try:
    page_icon_path = get_image_path("carinha-agente-max-ia.png")
    page_icon_obj = Image.open(page_icon_path) if os.path.exists(page_icon_path) else "ü§ñ"
except Exception:
    page_icon_obj = "ü§ñ"
st.set_page_config(page_title="Max IA", page_icon=page_icon_obj, layout="wide", initial_sidebar_state="expanded")

# 2. CONSTANTES E CARREGAMENTO DE CONFIGURA√á√ïES
APP_KEY_SUFFIX = "maxia_app_v5.2_brand_base"
USER_COLLECTION = "users"
os.environ["TOKENIZERS_PARALLELISM"] = "false"
PROMPTS_CONFIG = carregar_prompts_config()

# 3. FUN√á√ïES AUXILIARES GLOBAIS
# ... (c√≥digo das fun√ß√µes auxiliares, sem altera√ß√µes)

# 4. INICIALIZA√á√ÉO DE SERVI√áOS
# ... (c√≥digo de inicializa√ß√£o, sem altera√ß√µes)

# 5. CLASSE PRINCIPAL DO AGENTE
class MaxAgente:
    def __init__(self, llm_instance, db_firestore_instance):
        self.llm = llm_instance; self.db = db_firestore_instance

    # ... (m√©todos exibir_painel_boas_vindas e exibir_max_marketing_total sem altera√ß√µes)

    # <<< M√âTODO ATUALIZADO E MELHORADO >>>
    def exibir_max_construtor(self):
        st.header("üèóÔ∏è Max Construtor de Landing Pages"); st.caption("Gere a base da sua p√°gina e depois a refine no Ateli√™.")
        st.markdown("---")
        
        # ... (c√≥digo de gerenciamento de estado, sem altera√ß√µes)

        if st.session_state.refinement_mode:
            # ... (c√≥digo do Ateli√™, sem altera√ß√µes por enquanto)

        elif st.session_state.genesis_html_code:
            # ... (c√≥digo de exibi√ß√£o da p√°gina gerada, sem altera√ß√µes)
        
        elif st.session_state.genesis_step > len(self.get_perguntas_genesis()):
            st.success("‚úÖ Entrevista Conclu√≠da! Revise o briefing abaixo.")
            # ... (c√≥digo de exibi√ß√£o do resumo do briefing)
            briefing_formatado = ""
            for p, r in st.session_state.genesis_briefing.items():
                briefing_formatado += f"- {p}: {r}\n"
            
            # ... (bot√µes de corrigir e gerar)
            if st.button("üèóÔ∏è Gerar Esbo√ßo da P√°gina", type="primary", use_container_width=True):
                with st.spinner("üöÄ Max Construtor est√° desenhando uma base de grife..."):
                    # AQUI USAMOS O NOVO PROMPT MELHORADO
                    prompt_construtor = self.get_prompt_construtor(briefing_formatado)
                    try:
                        if self.llm:
                            resposta_ia = self.llm.invoke(prompt_construtor).content
                            html_limpo = resposta_ia.strip().removeprefix("```html").removesuffix("```").strip()
                            st.session_state.genesis_html_code = html_limpo
                            st.rerun()
                        # ... (resto do try/except)
                    except Exception as e: st.error(f"Erro ao contatar a IA: {e}")
        else:
            # L√≥gica da entrevista, agora com 8 perguntas
            perguntas = self.get_perguntas_genesis()
            step = st.session_state.genesis_step
            if step == 0:
                st.info("Eu sou o Max Construtor. Juntos, vamos criar a base da sua landing page respondendo a uma breve entrevista.")
                if st.button("Vamos Come√ßar!", type="primary"):
                    st.session_state.genesis_step = 1; st.rerun()
            else:
                p_info = perguntas[step]
                st.progress(step / len(perguntas))
                st.subheader(f"{p_info['emoji']} {p_info['titulo']} ({step}/{len(perguntas)})")
                with st.expander("üéì Dica do MaxTrainer"): st.write(p_info["dica"])
                with st.form(key=f"genesis_form_{step}"):
                    default_value = st.session_state.genesis_briefing.get(p_info["pergunta"], "")
                    resposta = st.text_area(p_info["pergunta"], value=default_value, key=f"genesis_input_{step}", height=100)
                    col_nav1, col_nav2 = st.columns(2)
                    with col_nav1:
                        if st.form_submit_button("‚¨ÖÔ∏è Pergunta Anterior", use_container_width=True, disabled=(step == 1)):
                            st.session_state.genesis_briefing[p_info["pergunta"]] = resposta; st.session_state.genesis_step -= 1; st.rerun()
                    with col_nav2:
                        if st.form_submit_button("Pr√≥xima Pergunta ‚û°Ô∏è", use_container_width=True, type="primary"):
                            st.session_state.genesis_briefing[p_info["pergunta"]] = resposta; st.session_state.genesis_step += 1; st.rerun()

    # <<< M√âTODO ATUALIZADO COM AS PERGUNTAS DE BRANDING >>>
    def get_perguntas_genesis(self):
        return {
            1: {"pergunta": "Quais s√£o as 2 ou 3 cores principais da sua marca? (Ex: Azul escuro, branco, dourado)", "dica": "Estas cores ser√£o usadas como base para o design da sua p√°gina.", "titulo": "Identidade Visual: Cores", "emoji": "üé®"},
            2: {"pergunta": "Qual o estilo das fontes que voc√™ prefere?", "dica": "Isto definir√° a personalidade da sua p√°gina. Ex: 'Modernas e limpas', 'Elegantes e cl√°ssicas', ou 'Ousadas e criativas'.", "titulo": "Identidade Visual: Fontes", "emoji": "‚úíÔ∏è"},
            3: {"pergunta": "Qual o nome do seu produto, servi√ßo ou empresa?", "dica": "Seja claro e direto.", "titulo": "Conte√∫do: Nome", "emoji": "üè∑Ô∏è"},
            4: {"pergunta": "Qual √© a sua grande promessa ou headline principal?", "dica": "Foque na transforma√ß√£o que voc√™ gera. Ex: 'Conforto e eleg√¢ncia a cada passo'.", "titulo": "Conte√∫do: Headline", "emoji": "üí•"},
            5: {"pergunta": "Para quem √© esta solu√ß√£o? Descreva seu cliente ideal.", "dica": "'Mulheres de 30-50 anos...' √© melhor que 'Pessoas'.", "titulo": "Conte√∫do: P√∫blico", "emoji": "üë•"},
            6: {"pergunta": "Liste 3 caracter√≠sticas ou benef√≠cios importantes.", "dica": "Use frases curtas e diretas. Ex: 'Feito com couro leg√≠timo', 'Garantia de 1 ano'.", "titulo": "Conte√∫do: Benef√≠cios", "emoji": "‚úÖ"},
            7: {"pergunta": "Voc√™ tem algum depoimento de cliente para incluir? (Nome e texto)", "dica": "A prova social √© uma das ferramentas de venda mais poderosas.", "titulo": "Conte√∫do: Depoimentos", "emoji": "üí¨"},
            8: {"pergunta": "Qual a√ß√£o voc√™ quer que o visitante realize? (Sua Chamada para A√ß√£o - CTA)", "dica": "Use um verbo de a√ß√£o claro. Ex: 'Compre agora'.", "titulo": "Conte√∫do: CTA", "emoji": "üéØ"}
        }

    # <<< M√âTODO ATUALIZADO COM O PROMPT DE 3 ATOS E BRANDING >>>
    def get_prompt_construtor(self, briefing):
        return f"""
**Instru√ß√£o Mestra:** Voc√™ √© um Desenvolvedor Web Full-Stack e Designer de UI/UX s√™nior, especialista em criar landing pages de ALTA QUALIDADE com HTML e CSS.
**Tarefa:** Crie o c√≥digo completo para um **√∫nico arquivo `index.html`** de um esbo√ßo de p√°gina. O arquivo DEVE ser autocontido e usar as informa√ß√µes de branding e conte√∫do do briefing.
**Requisitos Cr√≠ticos:**
1.  **Autocontido:** Todo o CSS deve estar dentro de uma tag `<style>` no `<head>`.
2.  **Responsivo:** O design DEVE ser 100% responsivo para desktops e celulares.
3.  **Diretiva de Estilo:** Use as informa√ß√µes de branding do briefing. A cor prim√°ria deve ser usada nos bot√µes e t√≠tulos principais. As fontes devem ser importadas do Google Fonts e escolhidas com base no estilo pedido pelo usu√°rio (se pediu 'Modernas', use 'Montserrat' e 'Lato'; se pediu 'Elegantes', use 'Playfair Display' e 'Roboto'; se pediu 'Ousadas', use 'Poppins' e 'Open Sans').
4.  **Diretiva de Estrutura (3 Atos):**
    * **Ato 1 (Hero Section):** Crie uma se√ß√£o de topo impactante com a headline principal (h1) e um placeholder para um v√≠deo: ``.
    * **Ato 2 (Benef√≠cios e CTA):** Crie uma se√ß√£o para os benef√≠cios listados e inclua a chamada para a√ß√£o principal (bot√£o).
    * **Ato 3 (Destaques e CTA Final):** Crie uma se√ß√£o de rodap√© expandida (footer) com espa√ßo para 3 a 6 destaques ou informa√ß√µes adicionais (ex: 'Entrega R√°pida', 'Suporte 24h') e repita a chamada para a√ß√£o.
5.  **Placeholders de Imagem:** Use coment√°rios HTML claros: ``, ``.

**[BRIEFING DO USU√ÅRIO]**
{briefing}
**Diretiva Final:** Gere **APENAS O C√ìDIGO HTML PURO**, come√ßando com `<!DOCTYPE html>` e terminando com `</html>`. N√ÉO inclua ```html.
"""

    def get_prompt_refinamento(self, html_base, logo_b64, main_image_b64):
        # ... (c√≥digo do prompt de refinamento, sem altera√ß√µes)
    
    # ... (placeholders dos outros agentes, sem altera√ß√µes)

# 6. ESTRUTURA PRINCIPAL E EXECU√á√ÉO DO APP
# ... (fun√ß√£o main(), sem altera√ß√µes)
