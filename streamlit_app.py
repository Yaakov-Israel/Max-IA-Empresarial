# ==============================================================================
# 1. IMPORTA√á√ïES E CONFIGURA√á√ÉO INICIAL DA P√ÅGINA
# ==============================================================================
import streamlit as st
import os
import io
import json
import pyrebase
import base64
import time
import datetime
import firebase_admin
from PIL import Image
from docx import Document
from fpdf import FPDF
from langchain_google_genai import ChatGoogleGenerativeAI
from firebase_admin import credentials, firestore as firebase_admin_firestore
from utils import carregar_prompts_config, get_image_path, get_font_path

try:
    page_icon_path = get_image_path("carinha-agente-max-ia.png")
    page_icon_obj = Image.open(page_icon_path) if os.path.exists(page_icon_path) else "ü§ñ"
except Exception:
    page_icon_obj = "ü§ñ"
st.set_page_config(page_title="Max IA", page_icon=page_icon_obj, layout="wide", initial_sidebar_state="expanded")
# ==============================================================================
# 2. CONSTANTES E CARREGAMENTO DE CONFIGURA√á√ïES
# ==============================================================================
APP_KEY_SUFFIX = "maxia_app_v9.1_stable"
USER_COLLECTION = "users"
COMPANY_COLLECTION = "companies"
os.environ["TOKENIZERS_PARALLELISM"] = "false"
PROMPTS_CONFIG = carregar_prompts_config()
# ==============================================================================
# 3. FUN√á√ïES AUXILIARES GLOBAIS
# ==============================================================================
def convert_image_to_base64(image_name):
    image_path = get_image_path(image_name)
    try:
        if os.path.exists(image_path):
            with open(image_path, "rb") as image_file: return base64.b64encode(image_file.read()).decode()
    except Exception as e: print(f"ERRO convert_image_to_base64: {e}")
    return None

def gerar_arquivo_download(conteudo, formato):
    if formato == "txt": return io.BytesIO(conteudo.encode("utf-8"))
    elif formato == "docx":
        document = Document(); document.add_paragraph(conteudo); bio = io.BytesIO(); document.save(bio); bio.seek(0)
        return bio
    elif formato == "pdf":
        pdf = FPDF(); pdf.add_page(); caminho_fonte = get_font_path("DejaVuSans.ttf")
        try:
            pdf.add_font('DejaVu', '', caminho_fonte, uni=True); pdf.set_font('DejaVu', '', 12)
        except RuntimeError:
            print(f"AVISO: Fonte '{caminho_fonte}' n√£o encontrada."); pdf.set_font("Arial", size=12)
        pdf.multi_cell(0, 10, txt=conteudo.encode('latin-1', 'replace').decode('latin-1'))
        return io.BytesIO(pdf.output(dest='S').encode('latin-1'))
    return None
# ==============================================================================
# 4. INICIALIZA√á√ÉO DE SERVI√áOS E AUTENTICA√á√ÉO
# ==============================================================================
@st.cache_resource
def initialize_firebase_services():
    try:
        conf = st.secrets["firebase_config"]; sa_creds = st.secrets["gcp_service_account"]
        pb_auth = pyrebase.initialize_app(dict(conf)).auth()
        if not firebase_admin._apps:
            cred = credentials.Certificate(dict(sa_creds)); firebase_admin.initialize_app(cred)
        firestore_db = firebase_admin_firestore.client()
        return pb_auth, firestore_db
    except Exception as e: st.error(f"Erro cr√≠tico na inicializa√ß√£o do Firebase: {e}"); return None, None

pb_auth_client, firestore_db = initialize_firebase_services()

@st.cache_resource
def get_llm():
    try:
        api_key = st.secrets.get("GOOGLE_API_KEY")
        if api_key: return ChatGoogleGenerativeAI(model="gemini-1.5-pro-latest", google_api_key=api_key, temperature=0.75)
        else: st.error("Chave GOOGLE_API_KEY n√£o configurada."); return None
    except Exception as e: st.error(f"Erro ao inicializar LLM: {e}"); return None

def get_current_user_status(auth_client):
    user_auth, uid, email = False, None, None; session_key = f'{APP_KEY_SUFFIX}_user_session_data'
    if session_key in st.session_state and st.session_state[session_key]:
        try:
            account_info = auth_client.get_account_info(st.session_state[session_key]['idToken'])
            user_auth = True; user_info = account_info['users'][0]
            uid = user_info['localId']; email = user_info.get('email')
            st.session_state.update({'user_is_authenticated': True, 'user_uid': uid, 'user_email': email})
        except Exception:
            st.session_state.clear(); user_auth = False
    return user_auth, uid, email
# ==============================================================================
# 5. CLASSE PRINCIPAL DO AGENTE
# ==============================================================================
class MaxAgente:
    def __init__(self, llm_instance, db_firestore_instance):
        self.llm = llm_instance
        self.db = db_firestore_instance

    # --- M√âTODOS GERAIS E DE ONBOARDING ---
    def exibir_onboarding_calibracao(self):
        st.title("Vamos calibrar o seu Max IA Empresarial! ‚öôÔ∏è")
        st.markdown("Para que eu possa ser um copiloto realmente eficaz, preciso entender um pouco sobre o seu neg√≥cio. Responda a algumas perguntas r√°pidas para come√ßarmos.")
        with st.form(key="calibration_form"):
            st.subheader("1. Conhecendo a Empresa")
            company_name = st.text_input("Nome da Empresa", placeholder="Ex: Padaria do Z√©")
            setor = st.selectbox("Setor de Atua√ß√£o", ["Varejo", "Servi√ßos", "Ind√∫stria", "Sa√∫de", "TI", "Alimenta√ß√£o", "Outro"])
            submitted = st.form_submit_button("Criar Minha Empresa e Continuar")
            if submitted:
                if not company_name:
                    st.warning("O nome da empresa √© essencial.")
                else:
                    user_uid = st.session_state.get('user_uid')
                    if user_uid and self.db:
                        with st.spinner("Criando o centro de comando da sua empresa..."):
                            try:
                                company_ref = self.db.collection(COMPANY_COLLECTION).document()
                                company_data = {"company_name": company_name, "owner_uid": user_uid, "setor": setor, "created_at": firebase_admin.firestore.SERVER_TIMESTAMP}
                                company_ref.set(company_data)
                                user_ref = self.db.collection(USER_COLLECTION).document(user_uid)
                                user_ref.update({"company_id": company_ref.id})
                                st.success(f"A empresa '{company_name}' foi criada!")
                                time.sleep(2)
                                st.rerun()
                            except Exception as e: st.error(f"Ocorreu um erro ao criar sua empresa: {e}")

    def exibir_onboarding_trainer(self):
        st.title("Quase l√°! Vamos personalizar sua experi√™ncia.")
        st.markdown("Para que suas intera√ß√µes com o Max IA sejam perfeitas, me conte sobre um assunto que voc√™ gosta. Assim, posso te explicar os conceitos mais complexos de neg√≥cios de um jeito que fa√ßa sentido para voc√™.")
        opcoes_analogia = ["Futebol", "Culin√°ria", "Carros", "Cinema e S√©ries", "M√∫sica", "Moda", "Neg√≥cios (tradicional)"]
        dominio_escolhido = st.selectbox("Escolha um assunto abaixo:", opcoes_analogia, key="analogy_choice")
        if st.button("Salvar e Come√ßar a Usar!", key="save_analogy_domain"):
            user_uid = st.session_state.get('user_uid')
            if user_uid and self.db:
                try:
                    user_ref = self.db.collection(USER_COLLECTION).document(user_uid)
                    user_ref.update({"analogy_domain": dominio_escolhido.lower()})
                    st.session_state['start_guided_tour'] = True
                    st.rerun()
                except Exception as e: st.error(f"Erro ao salvar sua prefer√™ncia: {e}")

    def exibir_tour_guiado(self):
        st.title("üéâ Bem-vindo ao seu Centro de Comando!")
        st.markdown("Eu sou o Max, seu copiloto de IA. Minha miss√£o √© te ajudar a tomar as melhores decis√µes.")
        st.info("Passei os √∫ltimos segundos analisando os dados da sua 'calibra√ß√£o' e preparei a plataforma para voc√™. Note que o menu √† esquerda j√° est√° dispon√≠vel.")
        if st.button("Entendido, vamos come√ßar!"):
            st.session_state['start_guided_tour'] = False
            st.rerun()

    def exibir_painel_boas_vindas(self):
        st.markdown("<div style='text-align: center;'><h1>üëã Bem-vindo ao Max IA!</h1></div>", unsafe_allow_html=True)
        logo_base64 = convert_image_to_base64('max-ia-logo.png')
        if logo_base64:
            st.markdown(f"<div style='text-align: center;'><img src='data:image/png;base64,{logo_base64}' width='200'></div>", unsafe_allow_html=True)
        st.markdown("<div style='text-align: center;'><p style='font-size: 1.2em;'>Ol√°! Eu sou o <strong>Max</strong>, seu assistente de IA para impulsionar o sucesso da sua empresa.</p></div>", unsafe_allow_html=True)
## --- 5.1: MaxMarketing Total --- ##

def get_prompt_campanha(self, nome_campanha, objetivo, publico, produto, duracao, canais, info_adicional):
    return f"""
**Instru√ß√£o Mestra:** Voc√™ √© o MaxMarketing Total, um Diretor de Marketing Estrat√©gico especialista em PMEs brasileiras. Sua tarefa √© criar um plano de campanha de marketing completo, multicanal e coeso, com base no briefing do usu√°rio.
**Tarefa:** Elabore um plano detalhado, dividindo a resposta em se√ß√µes claras e bem definidas usando os seguintes marcadores EXATOS: `[ESTRAT√âGIA DA CAMPANHA]`, `[CONTE√öDO PARA REDES SOCIAIS]`, `[CONTE√öDO PARA EMAIL MARKETING]` e `[IDEIAS PARA AN√öNCIOS PAGOS]`.

**[BRIEFING DO USU√ÅRIO]**
- Nome da Campanha: {nome_campanha}
- Principal Objetivo: {objetivo}
- P√∫blico-Alvo Detalhado: {publico}
- Produto/Servi√ßo em Foco: {produto}
- Dura√ß√£o da Campanha: {duracao}
- Canais Selecionados: {', '.join(canais)}
- Informa√ß√µes Adicionais: {info_adicional}

**--- IN√çCIO DO PLANO DA CAMPANHA ---**
[ESTRAT√âGIA DA CAMPANHA]
* **Conceito Central:** (Crie um conceito criativo, o "Big Idea" da campanha em uma frase).
* **Mensagem Principal:** (Qual a mensagem chave que ser√° repetida em todos os canais?).
* **Linha do Tempo Sugerida:** (Divida a dura√ß√£o da campanha em fases. Ex: Semana 1: Teaser...).
* **KPIs para Monitoramento:** (Sugira 2-3 m√©tricas para medir o sucesso. Ex: Taxa de Cliques, Custo por Lead).
[CONTE√öDO PARA REDES SOCIAIS]
(Crie 3 posts diferentes para o Instagram/Facebook que sigam a linha do tempo da campanha).
* **Post 1 (Fase de Teaser):**
* **Post 2 (Fase de Engajamento):**
* **Post 3 (Fase de Oferta/CTA):**
[CONTE√öDO PARA EMAIL MARKETING]
(Crie uma sequ√™ncia de 2 e-mails).
* **E-mail 1 (Apresenta√ß√£o):**
* **E-mail 2 (Lembrete/Oferta):**
[IDEIAS PARA AN√öNCIOS PAGOS]
(Crie 2 sugest√µes de texto para an√∫ncios).
* **An√∫ncio 1 (Foco em Dor/Solu√ß√£o):**
* **An√∫ncio 2 (Foco em Oferta/Benef√≠cio):**
"""

def exibir_max_marketing_total(self):
    st.header("üöÄ MaxMarketing Total"); st.caption("Seu copiloto para criar posts, campanhas completas e muito mais!")
    st.markdown("---")

    session_key_post = f"mkt_post_{APP_KEY_SUFFIX}"
    if session_key_post not in st.session_state: st.session_state[session_key_post] = None
        
    session_key_campaign = f"mkt_campaign_{APP_KEY_SUFFIX}"
    if session_key_campaign not in st.session_state: st.session_state[session_key_campaign] = None

    opcoes_marketing = ["Criar Post", "Criar campanha completa"]
    acao_selecionada = st.radio("Qual ferramenta do MaxMarketing vamos usar hoje?", opcoes_marketing, key=f"mkt_radio_{APP_KEY_SUFFIX}")

    if acao_selecionada == "Criar Post":
        st.session_state[session_key_campaign] = None
        if st.session_state[session_key_post]:
            st.subheader("üéâ Conte√∫do Gerado pelo Max IA!")
            st.markdown(st.session_state[session_key_post])
            st.markdown("---")
            with st.expander("üì• Baixar Conte√∫do"):
                formato = st.selectbox("Formato:", ("txt", "docx", "pdf"), key=f"dl_fmt_post_{APP_KEY_SUFFIX}")
                st.download_button(f"Baixar .{formato}", gerar_arquivo_download(st.session_state[session_key_post], formato), f"post_max_ia.{formato}", use_container_width=True)
            st.markdown("---")
            if st.button("‚ú® Criar Outro Conte√∫do"): st.session_state[session_key_post] = None; st.rerun()
        else:
            st.subheader("üìù Briefing do Conte√∫do")
            with st.form(key=f"mkt_form_post_{APP_KEY_SUFFIX}"):
                formatos_disponiveis = ["Post para Blog (Gerar Leads)","An√∫ncio para OLX / Mercado Livre", "Descri√ß√£o de Produto para Shopify / E-commerce","Instagram Post (Feed)", "Instagram Stories", "Instagram Reels (Roteiro)","Facebook Post", "Facebook Stories","Mensagem para WhatsApp", "E-mail Marketing", "Google ADS (Texto)","Roteiro de V√≠deo YouTube", "Roteiro para TikTok", "Post para X (Twitter)"]
                formato_selecionado = st.selectbox("1. Escolha o formato do conte√∫do:", formatos_disponiveis)
                objetivo = st.text_area("2. Qual o objetivo deste conte√∫do?")
                publico = st.text_input("3. Quem voc√™ quer alcan√ßar?")
                produto_servico = st.text_area("4. Qual produto/servi√ßo est√° promovendo?")
                info_adicional = st.text_area("5. Alguma informa√ß√£o adicional ou CTA?")
                if st.form_submit_button("üí° Gerar Conte√∫do com Max IA!"):
                    if not objetivo: st.warning("O objetivo √© essencial.")
                    else:
                        with st.spinner(f"ü§ñ Max IA est√° pensando como um especialista em {formato_selecionado}..."):
                            instrucao_base = f"**Contexto do Neg√≥cio:**\n- **Objetivo:** {objetivo}\n- **P√∫blico-alvo:** {publico}\n- **Produto/Servi√ßo:** {produto_servico}\n- **Informa√ß√µes Adicionais/CTA:** {info_adicional}"
                            if "OLX" in formato_selecionado or "Mercado Livre" in formato_selecionado:
                                especialista = "um vendedor experiente de marketplaces."
                                tarefa = "Crie um an√∫ncio otimizado. Gere um T√≠tulo chamativo (m√°x 60 caracteres) e uma Descri√ß√£o detalhada e persuasiva."
                            elif "Shopify" in formato_selecionado or "E-commerce" in formato_selecionado:
                                especialista = "um especialista em copywriting para e-commerce."
                                tarefa = "Crie uma descri√ß√£o de produto completa e otimizada para SEO. Gere um T√≠tulo de Produto claro, uma Descri√ß√£o Persuasiva e 3 a 5 bullet points."
                            elif "Blog" in formato_selecionado:
                                especialista = "um especialista em SEO e Marketing de Conte√∫do."
                                tarefa = "Crie um post de blog otimizado para gerar leads. Estruture com um T√≠tulo magn√©tico, uma introdu√ß√£o que prenda a aten√ß√£o, desenvolva o tema com subt√≠tulos e par√°grafos curtos, e finalize com uma conclus√£o e um CTA claro para o leitor tomar uma a√ß√£o."
                            else:
                                especialista = "um especialista de marketing digital."
                                tarefa = f"Crie um conte√∫do para **{formato_selecionado}**."
                            prompt_final = f"**Instru√ß√£o:** Voc√™ √© {especialista}\n\n**Tarefa:** {tarefa}\n\n{instrucao_base}"
                            try:
                                if self.llm: resposta = self.llm.invoke(prompt_final); st.session_state[session_key_post] = resposta.content; st.rerun()
                                else: st.error("LLM n√£o dispon√≠vel.")
                            except Exception as e: st.error(f"Erro na IA: {e}")
    
    elif acao_selecionada == "Criar campanha completa":
        st.session_state[session_key_post] = None
        if st.session_state[session_key_campaign]:
            st.subheader("üéâ Plano de Campanha Gerado pelo Max IA!")
            resposta_completa = st.session_state[session_key_campaign]
            with st.expander("üì• Baixar Plano de Campanha Completo"):
                formato_campanha = st.selectbox("Escolha o formato:", ("txt", "docx", "pdf"), key="dl_fmt_campaign")
                st.download_button(label=f"Baixar como .{formato_campanha}",data=gerar_arquivo_download(resposta_completa, formato_campanha),file_name=f"plano_de_campanha_max_ia.{formato_campanha}",use_container_width=True)
            st.markdown("---")
            def extrair_secao(texto_completo, secao_inicio, todas_secoes):
                try:
                    idx_inicio = texto_completo.index(secao_inicio) + len(secao_inicio); idx_fim = len(texto_completo)
                    secao_atual_index = todas_secoes.index(secao_inicio)
                    if secao_atual_index + 1 < len(todas_secoes):
                        proxima_secao = todas_secoes[secao_atual_index + 1]
                        if proxima_secao in texto_completo: idx_fim = texto_completo.index(proxima_secao)
                    return texto_completo[idx_inicio:idx_fim].strip()
                except ValueError: return f"A se√ß√£o '{secao_inicio}' n√£o foi encontrada na resposta."
            secoes = ["[ESTRAT√âGIA DA CAMPANHA]", "[CONTE√öDO PARA REDES SOCIAIS]", "[CONTE√öDO PARA EMAIL MARKETING]", "[IDEIAS PARA AN√öNCIOS PAGOS]"]
            conteudo_estrategia = extrair_secao(resposta_completa, secoes[0], secoes)
            conteudo_redes = extrair_secao(resposta_completa, secoes[1], secoes)
            conteudo_email = extrair_secao(resposta_completa, secoes[2], secoes)
            conteudo_anuncios = extrair_secao(resposta_completa, secoes[3], secoes)
            tab1, tab2, tab3, tab4 = st.tabs(["üß≠ Estrat√©gia", "üì± Redes Sociais", "‚úâÔ∏è E-mail", "üí∞ An√∫ncios"])
            with tab1: st.markdown(conteudo_estrategia)
            with tab2: st.markdown(conteudo_redes)
            with tab3: st.markdown(conteudo_email)
            with tab4: st.markdown(conteudo_anuncios)
            st.markdown("---")
            if st.button("‚ú® Criar Nova Campanha"): st.session_state[session_key_campaign] = None; st.rerun()
        else:
            st.subheader("üìù Briefing da Campanha Estrat√©gica")
            with st.form(key=f"mkt_form_campaign_{APP_KEY_SUFFIX}"):
                st.write("Preencha os detalhes para o Max IA construir seu plano de campanha.")
                nome_campanha = st.text_input("1. Nome da Campanha")
                objetivo_campanha = st.text_area("2. Principal Objetivo")
                publico_campanha = st.text_area("3. P√∫blico-alvo (dores e desejos)")
                produto_servico_campanha = st.text_area("4. Produto/Servi√ßo em foco")
                duracao_campanha = st.selectbox("5. Dura√ß√£o:", ("1 Semana", "15 Dias", "1 M√™s", "Trimestre"))
                novos_canais = ["Instagram", "Facebook", "E-mail Marketing", "Google ADS", "V√≠deo YouTube", "V√≠deo TikTok", "Reels Facebook", "Reels Instagram", "Blog"]
                canais_campanha = st.multiselect("6. Canais:", options=novos_canais, placeholder="Escolha as op√ß√µes desejadas")
                info_adicional_campanha = st.text_area("7. Informa√ß√µes adicionais ou ofertas")
                if st.form_submit_button("üöÄ Gerar Plano de Campanha"):
                    if not all([nome_campanha, objetivo_campanha, publico_campanha, produto_servico_campanha]):
                        st.warning("Preencha os 4 primeiros campos.")
                    else:
                        with st.spinner("üß† Max IA est√° pensando como um estrategista..."):
                            prompt_campanha = self.get_prompt_campanha(nome_campanha, objetivo_campanha, publico_campanha, produto_servico_campanha, duracao_campanha, canais_campanha, info_adicional_campanha)
                            try:
                                if self.llm:
                                    resposta_ia = self.llm.invoke(prompt_campanha)
                                    st.session_state[session_key_campaign] = resposta_ia.content; st.rerun()
                                else:
                                    st.error("LLM n√£o dispon√≠vel.")
                            except Exception as e:
                                st.error(f"Erro na IA: {e}")
## --- 5.2: Max Construtor - P√°gina de Venda --- ##
def exibir_max_construtor(self):
    st.info("Agente Max Construtor em desenvolvimento.")
## --- 5.3: Max Financeiro - O C√©rebro Financeiro em Tempo Real --- ##
def exibir_max_financeiro(self):
    st.info("Agente Max Financeiro em desenvolvimento.")
## --- 5.4: Max Administrativo - Central de Comando, Estrat√©gia e Opera√ß√µes --- ##
def exibir_max_administrativo(self):
    st.info("Agente Max Administrativo em desenvolvimento.")
## --- 5.5: MaxTrainer IA - Mentor Empresarial --- ##
def get_analogy_prompt(self, user_question, analogy_domain):
    return f"""
**Instru√ß√£o Mestra:** Voc√™ √© o MaxTrainer IA, um mentor de neg√≥cios amig√°vel, paciente e genial. Sua especialidade √© explicar conceitos de neg√≥cios complexos usando analogias simples e detalhadas.

**Contexto:**
- **Dom√≠nio de Analogia do Usu√°rio:** {analogy_domain}
- **Pergunta do Usu√°rio:** {user_question}

**Sua Tarefa em 3 Passos:**
1.  **Identifique o Conceito Central:** Entenda qual √© o conceito de neg√≥cios principal por tr√°s da pergunta do usu√°rio.
2.  **Busque a Defini√ß√£o Factual:** Internamente, pense na defini√ß√£o t√©cnica e correta do conceito.
3.  **Crie a Resposta com Analogia:** Responda ao usu√°rio EXCLUSIVAMENTE usando uma analogia detalhada baseada no DOM√çNIO DE ANALOGIA dele. N√£o use jarg√µes de neg√≥cios. Seja did√°tico, divertido e profundo. Comece a resposta de forma amig√°vel.

**Exemplo (se o dom√≠nio fosse 'culin√°ria' e a pergunta 'O que √© SWOT?'):**
"√ìtima pergunta! Pensar em SWOT √© como planejar um grande jantar.
- **For√ßas:** S√£o seus 'ingredientes secretos', o que sua cozinha faz de melhor. Ex: O tempero especial da sua av√≥ que ningu√©m copia.
- **Fraquezas:** √â aquele prato que sempre queima. Ex: Seu forno n√£o assa direito.
- **Oportunidades:** S√£o as tend√™ncias l√° fora. Ex: Seus vizinhos amariam receber marmitas.
- **Amea√ßas:** √â a nova padaria chique que abriu na sua rua."

**--- IN√çCIO DA RESPOSTA ---**
"""

def exibir_max_trainer_ia(self):
    st.title("üéì MaxTrainer IA")
    st.markdown("Seu mentor pessoal para descomplicar a jornada empreendedora. Fa√ßa qualquer pergunta de neg√≥cios!")

    if "messages_trainer" not in st.session_state:
        st.session_state.messages_trainer = [{"role": "assistant", "content": "Ol√°! Sobre o que vamos conversar hoje?"}]

    for message in st.session_state.messages_trainer:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

    if prompt := st.chat_input("Pergunte sobre DRE, Fluxo de Caixa, Marketing..."):
        st.session_state.messages_trainer.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)

        with st.chat_message("assistant"):
            message_placeholder = st.empty()
            with st.spinner("MaxTrainer est√° pensando na melhor analogia para voc√™..."):
                try:
                    user_uid = st.session_state.get('user_uid')
                    user_doc = self.db.collection(USER_COLLECTION).document(user_uid).get()
                    analogy_domain = user_doc.to_dict().get("analogy_domain", "neg√≥cios")
                    
                    final_prompt = self.get_analogy_prompt(prompt, analogy_domain)
                    
                    if self.llm:
                        full_response = self.llm.invoke(final_prompt).content
                    else:
                        full_response = "Desculpe, meu c√©rebro (LLM) n√£o est√° dispon√≠vel agora."
                        
                except Exception as e:
                    full_response = f"Ocorreu um erro ao processar sua pergunta: {e}"
            
            message_placeholder.markdown(full_response)
        st.session_state.messages_trainer.append({"role": "assistant", "content": full_response})
# 5.6: Central do Cliente 360¬∞
def exibir_central_cliente(self):
    st.info("Agente Central do Cliente 360¬∞ em desenvolvimento.")
# ==============================================================================
# 6. ESTRUTURA PRINCIPAL E EXECU√á√ÉO DO APP
# ==============================================================================
def main():
    if not all([pb_auth_client, firestore_db, PROMPTS_CONFIG]):
        st.error("Falha cr√≠tica na inicializa√ß√£o dos servi√ßos."); st.stop()

    user_is_authenticated, user_uid, user_email = get_current_user_status(pb_auth_client)

    if user_is_authenticated:
        if 'agente' not in st.session_state:
            llm = get_llm()
            if llm and firestore_db:
                st.session_state.agente = MaxAgente(llm, firestore_db)
            else:
                st.error("Agente Max IA n√£o p√¥de ser inicializado."); st.stop()
        
        agente = st.session_state.agente
        
        try:
            user_doc_ref = firestore_db.collection(USER_COLLECTION).document(user_uid)
            user_doc = user_doc_ref.get()
            user_data = user_doc.to_dict() if user_doc.exists else None
        except Exception as e:
            st.error(f"Erro ao buscar dados do usu√°rio: {e}"); user_data = None; st.stop()

        if not user_data:
            user_data = {"email": user_email, "registration_date": firebase_admin.firestore.SERVER_TIMESTAMP, "analogy_domain": None, "company_id": None}
            user_doc_ref.set(user_data)
        
        # --- L√ìGICA DE ONBOARDING E TOUR ---
        if user_data.get("company_id"):
            if user_data.get("analogy_domain"):
                if st.session_state.get('start_guided_tour', False):
                    agente.exibir_tour_guiado()
                else:
                    # --- APLICA√á√ÉO PRINCIPAL ---
                    st.sidebar.title("Max IA")
                    st.sidebar.markdown("---")
                    st.sidebar.write(f"Logado como: **{user_email}**")
                    if st.sidebar.button("Logout", key=f"{APP_KEY_SUFFIX}_logout"):
                        st.session_state.clear(); st.rerun()
                    
                    opcoes_menu = {
                        "üëã Bem-vindo": agente.exibir_painel_boas_vindas,
                        "üöÄ MaxMarketing Total": agente.exibir_max_marketing_total,
                        "üéì MaxTrainer IA": agente.exibir_max_trainer_ia,
                        "üìà Central do Cliente 360¬∞": agente.exibir_central_cliente,
                        "‚öôÔ∏è MaxAdministrativo": agente.exibir_max_administrativo,
                        "üí∞ MaxFinanceiro": agente.exibir_max_financeiro,
                        "üèóÔ∏è MaxConstrutor": agente.exibir_max_construtor,
                    }
                    selecao_label = st.sidebar.radio("Max Agentes IA:", list(opcoes_menu.keys()), key=f"{APP_KEY_SUFFIX}_menu")
                    opcoes_menu[selecao_label]()
            else:
                agente.exibir_onboarding_trainer()
        else:
            agente.exibir_onboarding_calibracao()
    else:
        # --- BLOCO DE LOGIN E REGISTRO ---
        st.title("üîë Bem-vindo ao Max IA")
        st.info("Fa√ßa login ou registre-se na barra lateral.")
        auth_action = st.sidebar.radio("Acesso:", ["Login", "Registrar"], key=f"{APP_KEY_SUFFIX}_auth")
        if auth_action == "Login":
            with st.sidebar.form("login_form"):
                email = st.text_input("Email")
                password = st.text_input("Senha", type="password")
                if st.form_submit_button("Entrar"):
                    try:
                        user_creds = pb_auth_client.sign_in_with_email_and_password(email, password)
                        st.session_state[f'{APP_KEY_SUFFIX}_user_session_data'] = user_creds
                        st.rerun()
                    except Exception: st.sidebar.error("Erro no login.")
        else: 
            with st.sidebar.form("register_form"):
                email = st.text_input("Seu Email")
                password = st.text_input("Crie uma Senha", type="password")
                if st.form_submit_button("Registrar Conta"):
                    if email and len(password) >= 6:
                        try:
                            new_user = pb_auth_client.create_user_with_email_and_password(email, password)
                            user_data = {"email": email, "registration_date": firebase_admin.firestore.SERVER_TIMESTAMP, "analogy_domain": None, "company_id": None}
                            firestore_db.collection(USER_COLLECTION).document(new_user['localId']).set(user_data)
                            st.sidebar.success("Conta criada! Fa√ßa o login.")
                        except Exception as e: st.sidebar.error("E-mail j√° em uso ou erro no registro.")
                    else: st.sidebar.warning("Preencha todos os campos corretamente.")
    
    st.sidebar.markdown("---")
    st.sidebar.info("Max IA | by Yaakov Israel & Gemini AI")

if __name__ == "__main__":
    main()
